### BELT Lesson Plan Quick Check 

The **BELT framework** is a quick tool designed for teachers at **The Excelsior School** to assess the effectiveness of their lesson plans and delivery in real-time. It is based on four key questions represented by the acronym **BELT**: **Boredom**, **Engagement**, **Learning**, and **Time**. Teachers are encouraged to periodically pause during planning and lesson delivery to ask themselves these questions.

*   **B - Boredom**: This aspect focuses on identifying if the classroom environment is becoming monotonous for students.
    *   Teachers should look for **signs of disengagement** such as **fidgeting**, **whispering**, or **off-task behavior**.
    *   It's important to consider if the **pace of the lesson is appropriate** and if the **activities are varied**.
    *   If the answer to whether the classroom is getting boring is "yes", teachers should consider **adjusting the lesson pace**, **introducing a new activity**, or using a **short energizer to refocus students**.

*   **E - Engagement**: This element assesses whether students are actively involved in the lesson.
    *   Teachers should observe if students are **actively participating in discussions, activities, or tasks**.
    *   Another indicator of engagement is whether students are **asking questions or offering explanations**.
    *   If **engagement is low**, teachers should think about **incorporating more interactive elements**, **clarifying instructions**, or **checking for understanding**.

*   **L - Learning**: This component evaluates whether students are acquiring knowledge and skills as intended by the lesson.
    *   Teachers need to consider if students are **meeting the learning outcomes of the lesson**.
    *   Evidence of learning can be seen if students are **able to demonstrate their understanding through activities or assessments**.
    *   If **learning is a concern**, teachers might need to consider **revisiting key points**, **providing additional practice**, or **adjusting the difficulty level**.

*   **T - Time**: This aspect focuses on the efficient use of instructional time.
    *   Teachers should be mindful of whether **activities are taking longer than expected**.
    *   They should also consider if **adjustments can be made to ensure efficient use of time**.
    *   If the answer to whether time is being wasted is "yes", teachers should consider **adjusting the lesson pace**, **introducing a new activity**, or using a **short energizer to refocus students**.

The BELT quick check offers several **benefits**:

*   It allows teachers to **adapt their lesson on the fly** to improve **student engagement and learning**.
*   It promotes a more **responsive teaching style**.

Important reminders regarding the use of BELT:

*   There is **no set frequency** for checking BELT; teachers should do it **intuitively as they see fit**.
*   BELT is a **tool**, not a **rigid script**, and teachers should use their **professional judgment** to adjust and personalize it for their specific teaching style and students.

### **Understanding the 5E Lesson Plan used in The Excelsior School and Its Application in Teaching**  

The **5E Model** is a structured approach to lesson planning designed to promote inquiry-based, student-centered learning. Developed by **BSCS (Biological Sciences Curriculum Study)**, this model consists of **five phases**: **Engage, Explore, Explain, Elaborate, and Evaluate**. Each phase serves a specific purpose in facilitating conceptual understanding and active learning.

---

## **Phases of the 5E Lesson Plan**  

### **1. Engage**  
**Purpose:** Capture students' interest and assess prior knowledge.  
- This phase is designed to stimulate curiosity and prepare students mentally for the lesson.  
- Teachers can use real-life scenarios, thought-provoking questions, videos, or short activities.  

**Examples in Science Class:**  
- Showing a **burning candle** to introduce the concept of chemical reactions.  
- Asking, **"Why does ice float on water?"** to trigger curiosity about density.  
- Using a **short simulation or experiment** without explanation to encourage inquiry.  

---

### **2. Explore**  
**Purpose:** Allow students to investigate and interact with the concept.  
- Students participate in hands-on activities, collect data, and discuss their observations.  
- The teacher facilitates but does not directly teach concepts at this stage.  

**Examples:**  
- Conducting a **vinegar and baking soda reaction** to explore gas production and chemical changes.  
- Using **magnets** to observe attraction and repulsion before explaining magnetic fields.  
- Observing **plant growth in different conditions** before discussing photosynthesis.  

---

### **3. Explain**  
**Purpose:** Provide formal instruction and clarify concepts.  
- Students share their observations and connect them with scientific explanations.  
- The teacher introduces key terms, definitions, and structured explanations.  

**Strategies:**  
- **Guided discussions** based on students' findings.  
- Using **diagrams, models, and multimedia** for clarity.  
- Relating the new concept to students’ prior knowledge.  

**Examples:**  
- After an experiment with **acids and bases**, explaining the **pH scale** and indicators.  
- Using a **model of the atom** to explain subatomic particles after students explore static electricity.  

---

### **4. Elaborate**  
**Purpose:** Deepen understanding by applying concepts in new situations.  
- This phase enhances critical thinking, problem-solving, and real-world applications.  

**Activities:**  
- **Project-based learning:** Students design a **water filtration system** after learning about water purification.  
- **Real-life applications:** Applying Newton’s Laws to sports, vehicle safety, or space exploration.  
- **Cross-disciplinary connections:** Linking science concepts to math, technology, or history.  

**Examples:**  
- After learning about **electric circuits**, students design a **home lighting system**.  
- After exploring **ecosystems**, students **analyze local environmental issues** and propose solutions.  

---

### **5. Evaluate**  
**Purpose:** Assess understanding and learning outcomes.  
- Teachers use formative and summative assessments to check comprehension.  
- Assessment can be informal (discussions, self-reflections) or formal (quizzes, projects).  

**Methods:**  
- **Concept maps** to visualize understanding.  
- **Exit tickets** where students answer a key question before leaving class.  
- **Performance-based assessments**, such as designing a science experiment.  

**Examples:**  
- **For Physics:** Students create a **working model** of a simple machine.  
- **For Chemistry:** Students write a **lab report** explaining the reaction observed.  
- **For Biology:** Students analyze real-world **food chains** and present findings.  

---

## **How to Use the 5E Model in Lesson Planning**  

### **1. Align the Lesson with Learning Objectives**  
- Identify **key concepts** and **skills** students need to acquire.  
- Ensure each phase of the 5E model helps achieve these objectives.  

### **2. Integrate Inquiry-Based Learning**  
- Encourage students to ask questions and make predictions.  
- Let them investigate before providing direct explanations.  

### **3. Use Differentiated Instruction**  
- Modify activities to cater to **diverse learning styles** (visual, auditory, kinesthetic).  
- Provide scaffolding for students who need extra support.  

### **4. Foster Active Participation**  
- Use technology, hands-on activities, and real-world applications.  
- Promote collaboration and peer discussions.  

### **5. Continuously Assess and Reflect**  
- Use formative assessments throughout the lesson.  
- Adjust instruction based on student responses.  

## **Conclusion**  
The **5E Lesson Plan** is a powerful tool that transforms traditional teaching into an engaging, student-centered experience. By **actively involving** learners in each phase, it promotes **deep understanding, critical thinking, and retention of knowledge**. When properly implemented, this model fosters **inquiry, exploration, and application**, making science learning more meaningful and effective.  

### Competencies of Teachers

The **Teacher Competency Framework 2072** outlines essential competencies expected of teachers, encompassing various aspects of their professional practice. These competencies are described with specific indicators.

*   **Content Knowledge**: This competency involves having **in-depth knowledge of the subject** a teacher teaches to address students' learning needs.
    *   Indicators include **in-depth and up-to-date knowledge in related subjects**, information about **concepts, principles, and interrelationships of related subjects**, information on the **overall aspect, including the structure of the curriculum** of the subject to be taught, and knowledge about its **interrelationship with other subjects**.
    *   It also includes knowledge about the **relevance of the subject matter to the local environment**.

*   **Pedagogical Knowledge**: This refers to having **in-depth knowledge about the teaching and learning process** and being able to use that knowledge suitably in teaching and learning.
    *   Indicators include **up-to-date knowledge on different teaching methods and latest teaching technology**, the ability **to determine the educational plan and strategy** to achieve course objectives and competencies, and the ability **to choose the appropriate teaching method** considering the subject matter, students' level, and individual differences.
    *   It also involves the ability **to facilitate learning by using appropriate teaching methods and materials for active learning**, **to evaluate various aspects of learning using appropriate tools**, analyze the results, and use them, and **to ensure learning and conduct remedial teaching as needed** through continuous evaluation.

*   **Knowledge about children/learners**: This competency focuses on the ability to **identify the diverse learning needs of children and teach accordingly**.
    *   Indicators include the ability **to use knowledge about the physical, mental, social, and emotional development of children and its relationship with education**, **to establish a relationship with new learning by properly assessing prior knowledge**, and **to recognize and respect the linguistic and social, cultural values and diversity of learners**.
    *   It also involves recognizing that **every child has the right to learn and can learn**, expecting higher learning, and the ability **to address the special learning needs and special abilities of children appropriately**.

*   **Learning environment and classroom management**: This competency involves being **able to manage classrooms for effective teaching and learning** while creating a **child-friendly, supportive, and challenging learning environment**.
    *   Indicators include the ability **to create a child-friendly learning environment** by appropriately managing resources and facilities while considering the overall development of the school, **to organize groups as needed** for creative learning opportunities, and **to encourage exemplary behavior** by maintaining cooperation and mutual understanding through positive discipline.
    *   It also includes the ability **to provide other appropriate means and opportunities**, including the use of the library and information technology, **to guide students towards discovery and creation**, and **to continue learning** by efficiently creating a suitable environment even in adverse situations.

*   **Communication and collaboration**: This competency involves being **able to communicate and collaborate effectively between students, parents, and teachers**.
    *   Indicators include the ability **to communicate effectively for inquiry, collaboration, and engagement**, **to motivate students to learn, clarify subject matter, engage in guided activities, and provide academic advice**, and **to share experience, expertise, mutual support, and collaboration among colleagues** to promote professional development and student participation.
    *   It also includes the ability **to discuss and consult with parents for support and recording of achievements and other subjects**.

*   **Continuous learning and professional development**: This competency reflects a **commitment to continuous learning and professional development** by analyzing existing knowledge, skills, and experience.
    *   Indicators include the desire **to seek professional development opportunities and engage in continuous learning**, **to be involved in continuous improvement through self-reflection**, and **to keep informed about studies and research** in their subject area and carry out practical research to improve teaching and learning.
    *   It also includes **developing innovation and creativity** through mutual support and collaboration.

*   **Legal Bases and Professional Conduct**: This competency involves being **capable of carrying out responsibilities by demonstrating ideal professional conduct** in accordance with prevailing laws, regulations, and social values.
    *   Indicators include the ability **to earn public trust by exhibiting respect and loyalty to the profession** and demonstrating the highest ethical behavior, **to take responsibility for actions and behavior** by demonstrating ideal behavior according to laws and guidelines, and **to demonstrate neutral and respectful behavior towards all children** in line with professional codes and official dignity, committed to their best interests.
    *   It also includes the ability **to demonstrate respect for social values and local culture** and tolerant behavior towards different opinions and beliefs, and **to demonstrate appropriate behavior** while being aware of global norms related to education (human rights, child rights, education as a fundamental right, education for all, etc.).

*   **Information and communication technology**: This competency involves being **able to use information and communication technology for effective teaching and learning**.
    *   Indicators include the ability **to select and use integrated learning strategies of information and communication technology to facilitate learning**, **to develop digital content suited to learners' needs** and use available content adaptively, **to make effective mutual communication and collaboration** to promote self-learning through IT tools, and **to use IT for assessment and enrichment of learning**.
    *   It also includes being **familiar with the policy related to IT in education** and developments in digital culture to display appropriate professional behavior.

### Examination and Result Analysis 

This document outlines the standards for teachers at **The Excelsior School** to evaluate their performance during **terminal examinations**, which are conducted on a **quadrimester basis**. The evaluation is based on the concept of the **3 A's**: **Afore**, **Amid**, and **After** the examination process.

*   **Stages**: The examination process is divided into three stages: **Afore (before)**, **Amid (during)**, and **After (after)** the examination.

*   **Parameters** at each stage include:
    *   **Afore**: **Syllabus**, **Specification grid**, **Question paper and its answer key**.
    *   **Amid**: **Invigilation duty**.
    *   **After**: **Answer sheet correction**, **Report Card (Data entry and verification)**, **Result analysis**.

*   **Standards for teachers at each stage**:

    *   **Afore**:
        *   **Syllabus**: Teachers must have an **understanding of the syllabus** and its usefulness to both teachers and students. They should be able to **create a comprehensible syllabus specific to a terminal exam** and mention details like the **marking scheme (theory/practical), study topics, and textbooks/reference books with page numbers**. They are also expected to **teach the syllabus completely**.
        *   **Specification grid**: Teachers need to **understand the specification grid** and be able to **create a comprehensible one** with details such as **full marks, time, question type, question quantity, and marking scheme**, typically **a month prior to the examination**.
        *   **Question Paper and its key**: Teachers must be able to **prepare a question paper and its key while maintaining integrity**. They should **create an original question paper** that includes **all learning levels (Bloom’s taxonomy)** based on the syllabus and specification grid created beforehand, with references to pre-existing questions but without plagiarism. The question paper is to be created **a month prior to the examination**. Teachers must **recheck and verify the question paper** before submitting it for verification and create an **answer key** that facilitates understanding the closeness of an answer to full marks. They are also prohibited from **providing probable questions in any form to students**.

    *   **Amid**:
        *   **Invigilation Duty**: Teachers should understand the **importance of invigilation duty** and perform it efficiently. This includes **reaching the exam hall on time**, maintaining **strict invigilation**, reminding students about remaining time, helping them understand questions, distributing question papers, and checking and signing answer scripts and supplementary papers. Teachers should **not engage in activities** such as reading, conversations, leaving without a substitute, correcting answer scripts, or helping students with answers. They are also responsible for the **answer sheets before handing them over** to the Examination department.

    *   **After**:
        *   **Answer sheet correction**: Teachers must be able to **correct answer sheets and tabulate marks appropriately** using a **red pen** and without any **bias**. They need to **submit the marks** to the Examination department within **3 to 4 days** (duration may vary) and **not disclose the marks to students before result distribution**. They are also responsible for generating data such as **average marks, range of marks, and the number of students below the passing mark** from the corrections.
        *   **Report card**: Teachers should **know about report card preparation** and be **extremely careful and precise while tabulating the marks**, **rechecking the marks grid** and tallying it with the answer sheet before submission.
        *   **Result analysis**: Teachers are expected to **analyze the results** based on **answer sheet sampling, data generation, compare and contrast, and reflections**. They should **discuss the results with the Instructional Supervisor** for useful takeaways and strategy design for the next term and **devise plans** to prevent the recurrence of pitfalls from one terminal exam to the next.

### Project Work Protocol 

This document outlines the project work guidelines for students in **Grades 1 to 10** across the three academic terms at **The Excelsior School**. The aim is to ensure project work enhances learning without causing undue pressure, with most work to be completed within school premises under supervision.

*   **Key Objectives** of project work include:
    *   **Enhance Learning**: Aligning projects with learning outcomes and deepening understanding.
    *   **Reduce Pressure**: Minimizing stress by keeping project work within the school.
    *   **Encourage Collaboration**: Fostering collaboration among teachers to avoid overlap and balance workload.
    *   **Engage with Environmental Awareness**: Ensuring each student participates in an Environment Day project in Term 1.
    *   **Provide Varied Project Types**: Offering a mix of styles like model-making, reports, investigations, writing assignments.

*   **General Guidelines**:
    *   **Project Assignment**: Each term will have at least one major project per student, often aligning with key dates like Environment Day. Project types can include model-making, investigations, reports, miniature models, articles, and presentations.
    *   **Completion Location**: Most project work should be done within school hours under teacher supervision. Teachers should monitor progress and provide support in class. Projects will be assigned as home assignments when necessary.
    *   **Teacher Collaboration**: Teachers must coordinate within grade levels to prevent project overlap and ensure a balanced workload across subjects through horizontal collaboration. Regular progress checks and feedback should be provided during class time.

*   **Roles & Responsibilities**:
    *   **Students**: Engage meaningfully with the project and meet objectives under supervision.
    *   **Subject Teachers**: Design projects aligned with learning outcomes and rubrics, supervise in school, and collaborate with colleagues.
    *   **Class Teachers**: Coordinate project timelines across subjects and ensure balanced workload within the class.
    *   **Instructional Supervisor**: Oversee project guideline adherence and provide support for smooth execution.
    *   **Parents**: Support students by encouraging completion in school and ensuring a balanced workload at home.

*   **Mark Allocation for Project Work**:
    *   **Grades 1 to 3**: 16 marks.
    *   **Grades 4 to 8**: 16 marks out of 50 for internal assessment.
    *   **Grades 9 to 10**: 6 marks out of 25 for internal assessment.

*   **Evaluation Rubric sample**: Includes criteria like **Creativity and Originality**, **Scientific Accuracy**, **Presentation and Clarity**, and **Timeliness**, with corresponding points for different levels of achievement (Excellent, Good, Satisfactory, Needs Improvement).

*   **Important Notes**:
    *   **Mini Projects**: Short writing assignments, articles, or booklets may also be conducted under classroom supervision.
    *   **Supervision**: Teachers must ensure adequate time and resources for project completion during school hours.
    *   **Grading and Feedback**: Projects will be assessed on effort, creativity, understanding, and adherence to guidelines. Timely feedback will be provided.
    *   **Communication**: Regular communication should be maintained with supervisors and guardians regarding student performance, highlighting areas of excellence and shortcomings.

### Science Core Principles 
The Department of Science at **The Excelsior School** outlines its ethos and approach through mission and vision statements and guiding principles encapsulated by the acronym **S.C.I.E.N.C.E.**.

*   **Vision**: To create a learning environment where science is not just learned but lived, sparking curiosity about its marvels, practical applications, and integration into everyday life.

*   **Mission**: To equip students with dynamic and innovative teaching approaches, nurturing independence, fostering personal growth, and igniting a deep enthusiasm for science.

*   **Guiding principles (S.C.I.E.N.C.E.)**:
    *   **Student-Centered Learning**: Prioritize hands-on learning, curiosity, and student-led inquiry, adapting teaching methods to diverse needs and interests. Design engaging, hands-on, and minds-on activities with real-life applications.
    *   **Curiosity and Critical Thinking**: Encourage a culture where questions are valued. Develop students' abilities to think critically and creatively using scientific methods to inquire, explore, hypothesize, experiment, and reflect. Aim to ignite natural curiosity and equip students for inquiry-based learning.
    *   **Integrity and Inclusivity**: Maintain high standards of integrity, promoting honesty, respect, and responsibility. Ensure science education is inclusive, providing equal opportunities for all students regardless of background or ability.
    *   **Engagement through Diverse Methods**: Employ a variety of teaching strategies, including interactive lectures, discussions, digital technology, and field trips. Cater to different learning styles using problem-based learning, project-based learning, and flipped classrooms. Focus on clear, concise, and accessible content while encouraging movement, play, and creativity.
    *   **Nurturing through Collaboration**: Foster a supportive environment where student collaboration is encouraged for peer learning, teamwork, and communication through group projects and cooperative learning.
    *   **Connections beyond the Classroom**: Extend learning by connecting scientific concepts to the real world, other subjects, and current global issues. Encourage applying knowledge in practical contexts to enhance problem-solving skills.
    *   **Evolution and Reflection**: Commit to continuous improvement and lifelong learning for both students and educators through ongoing assessment, reflective practices, and openness to new ideas and technologies to offer the most effective science education.

### Unit Learning Verification Tests 

This document outlines the **Formative Evaluation Assessment Process**, known as **Unit Learning Evidence Test Protocol (ULET)**, implemented at **The Excelsior School** to continuously monitor and support student learning.

*   **Process Overview**: This process involves a more **granular assessment schedule** than traditional end-of-term testing.
    *   **Frequent Assessments**: Multiple assessments are given at the end of each chapter or unit to identify learning gaps early and ensure continuous engagement.
    *   **Variety of Test Formats**: Individual departments can use various assessment methods and test item formats suited to learning objectives and subject matter. Traditional unit tests can be conducted with coordination, informing students a week prior, with no more than two tests in a day. This allows for differentiated tasks catering to diverse learning styles.
    *   **Comprehensive Feedback**: All scores are compiled and analyzed. Students receive detailed, specific, and actionable feedback to guide learning strategies.
    *   **Accurate Record Keeping**: Assessment results are thoroughly documented and stored for future reference, allowing tracking of progress and informing instruction.

*   **Prerequisites for Unit Tests**:
    *   **Completion of Chapter related tasks and correction**: Successful completion of classwork, homework, worksheets, projects, labs, and field visits, along with teacher correction, is needed.
    *   **Demonstration of Key Skills**: Students may need to show proficiency in relevant skills through activities or presentations.
    *   **Teacher Recommendation**: Teachers can use professional judgment to assess class readiness.
    *   **Timing**: Test timings should align with National Curriculum guidelines (3 hours for 75 marks, 2 hours for 50 marks), with a maximum of 2.4 minutes per mark.

*   **Benefits**:
    *   **Early Identification of Learning Gaps**: Timely intervention and support become possible.
    *   **Improved Student Understanding**: Diverse formats encourage deeper understanding by catering to different styles.
    *   **Data-Driven Instruction**: Feedback and records provide valuable data for future instruction.
    *   **Enhanced Student Engagement**: Frequent and differentiated assessments can increase motivation through regular feedback and self-evaluation.

### XLCR Internal Evaluation Protocol 

This document outlines the internal assessment protocol for the Department of Science & Technology at **The Excelsior School**, aiming to provide a comprehensive and effective means of evaluating student progress. The criteria apply to the assessment of each chapter in the science courses.

*   **Internal Evaluation Marks Distribution**:
    *   **Basic Level (Class 4 & 5 and Class 6 – 8)**:
        *   Attendance and participation: 4 marks.
        *   Experimental work: 20 marks (material setup, observation, testing, tabulation, conclusion, presentation, documentation).
        *   Project work: 16 marks (site visit, chart making, model making, material making, inquiry, presentation, documentation).
        *   Quarterly Examination: 10 marks (question paper based on specification grid, feedback for improvement).
        *   **Total: 50 marks**.
    *   **Secondary Level (Class 9 & 10)**:
        *   Attendance and participation: 3 marks.
        *   Experimental work: 10 marks (material setup, observation, testing, tabulation, conclusion, presentation, documentation).
        *   Project work: 6 marks (site visit, chart making, model making, material making, inquiry, presentation, documentation).
        *   Quarterly Examination: 6 marks (question paper based on specification grid, feedback for improvement).
        *   **Total: 25 marks**.

*   **Assessment Criteria (for each chapter)**:
    *   **Project Work**: Assesses the application of theoretical knowledge in practical, creative, and innovative ways through models, presentations, posters, etc.. Uses an evaluation rubric similar to the one in "PWP.docx.pdf" with criteria like Creativity, Scientific Accuracy, Presentation, and Timeliness.
    *   **Lab Practical**: Evaluates proficiency in practical science skills and the ability to conduct experiments accurately and safely through hands-on experiments. Criteria include Performance & Safety, Presentation, and Documentation in Record File, each with rating scales.
    *   **Notebooks Maintenance**: Assesses consistency and quality of classwork and homework based on regular entries, organization, neatness, and completeness. Criteria include Organization, Completeness, Neatness, and Timeliness, each with rating scales.
    *   **Chapter Assessment**: Measures understanding of chapter content through written or computer-based Multiple Choice Questions (MCQs).
    *   **Classroom Presence**: Encourages and recognizes regular attendance, active participation, and engagement. Criteria include Attendance, Participation, and Engagement, each with rating scales.

*   **Implementation**:
    *   Assessments will be conducted at the end of each chapter or major unit.
    *   Subject teachers are responsible for administering and recording scores.
    *   Regular audits will be done to ensure compliance.
    *   Feedback will be provided after each component, highlighting strengths and areas for improvement.
    *   Records will be maintained digitally.
    *   Marks will be converted as per the CDC framework.
    *   Teachers are not obligated to give additional marks to students who disregard the internal evaluation system.

# **World Environment Day at The Excelsior School**

### **What is World Environment Day?**
World Environment Day (WED) is celebrated annually on **June 5th** to raise awareness and promote action for environmental protection. Organized by the **United Nations**, it has been observed since **1973** and is one of the largest global outreach programs addressing issues like pollution, climate change, and conservation.

At **The Excelsior School**, Environment Day is celebrated with **various hands-on activities, projects, and performances** that engage students in environmental action.

---

## **Environment Day 2024**  
### **Theme: #GenerationRestoration**  
**Hosted by:** The Kingdom of Saudi Arabia  
**Focus:** Land restoration, desertification, and drought resilience

### **Objectives:**
- Raise awareness about environmental conservation.
- Encourage students to develop solutions for pollution and desertification.
- Promote hands-on learning through activities and exhibitions.

### **Major Activities (2024)**
| **Grade** | **Activity** | **Description** |
|-----------|-------------|----------------|
| **1** | School Cleaning Drill | Students cleaned classrooms and school premises. |
| **2** | Sorting Biodegradable & Non-Biodegradable Items | Buried waste and observed decomposition over time. |
| **3** | Making Paper Bags | Created eco-friendly shopping bags from newspapers. |
| **4** | Paper Recycling Exhibit | Turned waste paper into recycled paper and crafts. |
| **5** | Plastic to Fantastic | Converted plastic waste into useful and decorative items. |
| **6** | Desertification & Restoration Exhibit | Created models showcasing land degradation and recovery. |
| **7** | Parents’ Day Performance | A theatrical performance highlighting environmental issues. |
| **8** | Thread Art | Created art based on the Environment Day theme using colorful threads. |
| **9** | Swoyambhunath Stupa Cleaning | Cleaned a local heritage site to promote community responsibility. |

### **Key Highlights (2024)**
- **Interactive Learning:** Hands-on experiences such as **waste sorting, recycling, and restoration models** helped students grasp environmental concepts.
- **Community Engagement:** The **Swoyambhunath Stupa cleaning drive** involved students in protecting their cultural heritage.
- **Art & Performance:** Creative elements like **thread art, music, and theatre performances** reinforced environmental messages.

## **Environment Day 2023**  
### **Theme: #BeatPlasticPollution**  

### **Major Activities (2023)**
| **Grade** | **Activity** | **Description** |
|-----------|-------------|----------------|
| **1** | School & Community Cleanliness | Cleaned school surroundings and nearby areas. |
| **2** | Biodegradable vs. Non-Biodegradable Sorting | Buried waste to study decomposition. |
| **3** | Making Paper Bags | Created paper bags from old newspapers. |
| **4** | Paper Recycling | Produced recycled paper from waste materials. |
| **5** | Plastic to Fantastic | Upcycled plastic waste into useful items. |
| **6** | National Park Models | Designed models of wildlife conservation areas. |
| **7** | Stage Performances | Drama, music, and dance highlighting environmental themes. |
| **8** | Agamograph Art | Created dual-image artworks related to environmental conservation. |
| **9** | Swoyambhunath Stupa Cleaning | Conducted a cleanup drive at the heritage site. |

### **Key Highlights (2023)**
- The **#BeatPlasticPollution** theme emphasized **plastic waste reduction**.
- Students **designed National Park models** to learn about conservation.
- The event featured **a mix of science, art, and community service** to promote environmental awareness.
- **Public performances and creative art** projects showcased environmental messages.

---

## **Comparison of 2023 & 2024 Events**
| **Category** | **2023: #BeatPlasticPollution** | **2024: #GenerationRestoration** |
|-------------|--------------------------------|--------------------------------|
| **Focus** | Reducing plastic waste | Land restoration & desertification |
| **Art Projects** | Agamograph Art | Thread Art |
| **Performances** | Drama, Music, Dance | Theatrical & Musical Performance |
| **Major Hands-on Learning** | Recycling & Plastic Upcycling | Waste Sorting & Restoration Models |
| **Community Activity** | Swoyambhunath Stupa Cleaning | Swoyambhunath Stupa Cleaning |
| **Scientific Models** | National Park Conservation | Desertification & Restoration Models |

---

## **Key Takeaways**
1. **Holistic Learning Approach:** The Excelsior School integrates **science, art, and social responsibility** into its Environment Day celebrations.
2. **Community Involvement:** Activities like **stupa cleaning and waste management** extend beyond the school.
3. **Progressive Themes:** The school follows the **UN Environment Program themes** each year, aligning with global sustainability goals.
4. **Hands-on Activities:** Students engage in **practical tasks** (waste sorting, recycling, land restoration) to reinforce environmental concepts.

# **The Excelsior School – Intraschool Science Olympiad Overview**  

## **What is the Science Olympiad?**  
The **Science Olympiad** is a **STEAM-based competition** where students compete in different scientific disciplines, including **Physics, Chemistry, Biology, Astronomy, and Design**. The competition is divided into two main categories:  

### **1. Study Round**  
- A **theoretical** competition with **MCQ** and **subjective questions** based on various science topics.  

### **2. Build Round**  
- A **hands-on challenge** where students **design and construct** structures for specific tasks. Examples:  
  - **Catapult Challenge**: Build a catapult to launch objects.  
  - **Bridge Strength Challenge**: Create a bridge with minimal mass that can support maximum weight.  
  - **Musical Instrument Challenge**: Construct and perform using a self-made instrument.  

---

## **Learning Outcomes**  
The Olympiad helps students develop key skills and competencies:  

✅ **Conceptual Understanding** – Encourages deep learning through research-based activities.  
✅ **Analytical & Problem-Solving Skills** – Enhances students’ ability to analyze and solve challenges.  
✅ **Improved Academic Performance** – Strengthens critical thinking, leading to better grades.  
✅ **Boosted Self-Confidence** – Helps students become comfortable in competitive settings.  
✅ **Teamwork & Collaboration** – Encourages teamwork, communication, and collective problem-solving.  

---

## **Competition Structure**  

| **Day** | **Category** | **Time** | **Task** | **Participation** | **Points** |
|---------|-------------|----------|----------|------------------|------------|
| **Day 1** | **Study Round** | 20 min | MCQ Test (20 Qs, 1 mark each) | Individual | 30 |
|  |  | 60 min | Subjective Questions (5 Qs, 4 marks each) | Team | 25 |
| **Day 2** | **Build Round** | 60 min | Design, Build & Execution | Team | 20 |
| **Total Points** | **75** |  

---

## **Participant Selection Process**  
1️⃣ **Online Registration** – Students register with their House teachers.  
2️⃣ **MCQ Round** – **48 students** (12 per house) qualify for the next round.  
3️⃣ **Subjective Round** – Each house randomly forms **3 teams** (total **12 teams**).  
4️⃣ **Build Round** – The **best team from each house** competes (4 teams in total).  
5️⃣ **Awards** – **Gold, Silver, and Bronze medals + certificates** for the winners; the 4th team receives **certificates only**.  

---

## **Who Organizes the Olympiad?**  
- The **grade teachers** and **instructional supervisor** create the questions and challenges.  
- The **event is open to all levels** (juniors, intermediates, and seniors).  

---

## **Key Takeaways**  
🔬 A **fun, competitive, and engaging** way for students to apply science concepts.  
🏆 Encourages **critical thinking, teamwork, and creativity**.  
⚙️ Promotes **both theoretical knowledge and hands-on problem-solving**.  

The **Science Olympiad at The Excelsior School** is a **platform for young scientists to showcase their skills** and **develop a passion for innovation!** 🚀
# **Candle Making Activity – Tihar Festival (Grade 7)**  

## **Overview**  
The **Candle Making Activity** is an interactive, hands-on learning experience designed for **Grade 7 students** at **The Excelsior School**. Conducted during the **Tihar festival**, this activity provides students with the opportunity to **craft decorative candles** using wax, colors, and molds, fostering both creativity and practical skills.  

Beyond the creative aspect, the initiative also incorporates **entrepreneurial learning**. The candles produced by the students are sold during **Grade 5 Parents’ Day** to parents and the school. This allows students to **experience the fundamentals of entrepreneurship**, including **production, marketing, and financial literacy**.  

---

## **Materials Required**  

| **S.N** | **Materials** | **Quantity** |  
|------|------------|-----------|  
| 1 | **Wax** | 15 kg |  
| 2 | **Thread (for wicks)** | 10 m |  
| 3 | **Candle Colors** | 5-6 packets |  
| 4 | **Heating Stove** | 1 |  
| 5 | **Ladle (डाडु)** | 2 |  
| 6 | **Metal Cup** | 2 |  
| 7 | **Gas Cylinder** | 1 |  
| 8 | **Candle Moulds (सांचो)** | Small-2, Medium-2, Large-2 |  
| 9 | **Thick Plastic Sheet (त्रिपाल)** | 1 |  

---

## **Key Learning Outcomes**  
### **1. Hands-on Craftsmanship**  
Students gain **practical experience** in **wax melting, color mixing, and molding techniques**, enhancing their **technical skills** and **creativity**.  

### **2. Entrepreneurial Mindset**  
Through **selling their handmade candles**, students develop an **understanding of business fundamentals**, including **pricing, customer interaction, and financial transactions**. This real-world application of **entrepreneurship** nurtures a sense of **responsibility and financial awareness**.  

### **3. Festival and Cultural Connection**  
By creating decorative candles for **Tihar**, students engage with **cultural traditions**, reinforcing the **importance of craftsmanship and sustainability** in celebrations.  

### **4. Teamwork and Collaboration**  
The activity promotes **team-based learning**, where students work together in **production, packaging, and sales**, fostering **collaborative and communication skills**.  

---

## **Conclusion**  
The **Candle Making Activity** seamlessly integrates **science, creativity, culture, and entrepreneurship**, offering students a **practical and meaningful** learning experience. Through this initiative, students **not only develop craftsmanship skills but also gain firsthand experience in small-scale business operations**, preparing them for **real-world financial and entrepreneurial challenges** in the future. 

# **Pi Day Celebrations at The Excelsior School**  

## **What is Pi Day?**  
Pi Day, celebrated annually on **March 14 (3.14)**, honors the mathematical constant **π (pi)**, which represents the ratio of a circle's circumference to its diameter. This day not only highlights the beauty of mathematics but also fosters **creativity, problem-solving, and critical thinking** through engaging STEAM-based activities.  

---

## **Pi Day 2023 Activities**  
### **Grade-wise Events & Challenges**  

| **Grade** | **Activity** | **Description** | **Participation** | **Materials Used** | **Prizes** | **Facilitator** |  
|---------|----------------------------|------------------------------------------------|-----------------|---------------------|-------------------|----------------|  
| **6** | **Straw Tower Design Challenge** | Design a straw tower that can hold a cricket ball for 3 seconds. | Group of 6 | 25 straws, masking tape, scissors | Choco Pie for all team members | Sobit Pradhan |  
| **7** | **Pi-Themed Treasure Hunt** | Navigate through school using Pi-based clues to find a hidden prize. | Group of 6 | Hints, clues, periodic table | Choco Pie for all team members | Sahana Malakar |  
| **8** | **Pi-Themed Physics Numerical Challenge** | Solve 7 Pi-related physics problems in 22 minutes. | Individual | Numerical worksheet | Choco Pie (Top 3), Candy (Top 10) | Sachita Bajracharya |  
| **9** | **Pi-Themed Treasure Hunt** | Same as Grade 7 but for senior students. | Group of 6 | Hints, clues, periodic table | Choco Pie for all team members | Deenakar Khadka |  

📌 **Key Takeaway:** Students engaged in **engineering challenges, math puzzles, and problem-solving games** to explore the significance of Pi in real-world applications.  

---

## **Pi Day 2024 Activities**  
### **Objectives:**  
✔ **Enhance mathematical and scientific literacy** related to Pi.  
✔ **Develop problem-solving and analytical skills** through challenges.  
✔ **Foster creativity** with Pi-themed hands-on activities.  
✔ **Promote global citizenship** by exploring Pi’s role across cultures.  

### **Three-Day Celebration (March 12–14, 2024)**  

| **Day** | **Grade** | **Activity** | **Description** | **Participation** | **Facilitator** |  
|---------|---------|---------------------------|------------------------------------------------|-----------------|----------------|  
| **Day 1 (Juniors)** | **4** | **Science Agamograph Art** | Create Pi and science-themed agamograph art. | Individual/Group of 6 | Salina Shrestha |  
|  | **5** | **Pi-Themed Treasure Hunt** | Find hidden objects using Pi-based clues. | Group of 6 | Diya Ijam |  
| **Day 2 (Inters)** | **6** | **Straw Tower Challenge** | Build a stable straw tower to hold a cricket ball. | Group of 6 | Sobit Pradhan |  
|  | **7** | **Pi-Themed Treasure Hunt** | Navigate through school using Pi-based clues. | Group of 6 | Sahana Malakar |  
| **Day 3 (Seniors)** | **8** | **Pi-Themed Physics Numerical Challenge** | Solve physics problems using Pi. | Individual | Sachita Bajracharya |  
|  | **9** | **Pi-Themed Treasure Hunt** | Advanced version of treasure hunt with tougher clues. | Group of 6 | Deenakar Khadka |  

📌 **Merits of a Three-Day Plan:**  
- **Efficient facilitation** and better monitoring.  
- **Minimal resource conflicts**, allowing smooth execution.  
- **Enhanced media coverage** for school promotions.  
- **Potential for parental involvement** and engagement.  

---

## **Pi Day 2025 Activities**  
### **Innovative Approach – Incorporating Digital & Audiovisual Learning**  

| **Grade** | **Activity** | **Date** | **Details** |  
|---------|----------------------------|-------------|------------------------------------------------|  
| **4** | **On a Beam of Light – Listening Activity** | March 14 | Listen to the audiobook on Albert Einstein: ["On a Beam of Light"](https://youtu.be/cWJsdmSagv8) |  
| **5** | **Sir Cumference and the Dragon of Pi – Listening Activity** | March 14 | Listen to the audiobook about Pi: ["Sir Cumference and the Dragon of Pi"](https://youtu.be/39aknOrsnbs) |  
| **6** | **Inside Einstein’s Mind (2015) – Documentary** | March 14 | Watch the documentary ["Inside Einstein’s Mind"](https://youtu.be/7CZyDPELXs4) |  
| **7** | **Pi Day Bingo Game** | March 14 | Play **Pi-themed Bingo** ([Game Link](https://www.twinkl.com/resource/pi-day-bingo-game-us-m-1665501225)) |  
| **9** | **Pi-Themed Treasure Hunt** | March 14 | Navigate through school using Pi-based hints and clues. |  

📌 **Key Innovations in 2025:**  
✔ **Digital Learning Integration** – Use of **audiobooks and documentaries** to enhance conceptual understanding.  
✔ **Gamification** – **Pi Bingo Game** makes learning interactive and fun.  
✔ **Multisensory Learning** – A mix of **listening, watching, and problem-solving** improves engagement.  

---

## **Why Pi Day Matters?**  
🎯 **Bridges Math & STEAM** – Encourages students to explore the practical applications of mathematics in real-world challenges.  
🎯 **Encourages Problem-Solving** – Engaging students in logic-based tasks fosters **critical thinking**.  
🎯 **Develops Creativity & Collaboration** – Through **design, puzzles, and hands-on activities**, students explore Pi beyond numbers.  
🎯 **Fosters Lifelong Interest in Science & Math** – Fun and engaging activities help **remove the fear of math** and make learning enjoyable.  

---

## **Conclusion**  
The **Pi Day celebrations at The Excelsior School** have evolved each year, **combining engineering challenges, digital learning, treasure hunts, and creative projects**. This event **inspires students to appreciate mathematics and its real-world relevance** while fostering **teamwork, innovation, and problem-solving skills**. 

##Madam Sheetal Rana (Chairperson, The Excelsior School)
Madam Sheetal Rana serves as the Chairperson of The Excelsior School, where she plays a pivotal role in shaping the school’s vision and strategic direction. With a deep commitment to educational excellence, she ensures that the school provides an environment conducive to both academic and personal growth. Her leadership focuses on fostering a culture of inclusivity, innovation, and student-centered learning. Madam Sheetal is passionate about empowering educators and students to achieve their full potential, driving the school towards continual improvement and success.

##Sir Ram Basnet (Managing Director, The Excelsior School)
Sir Ram Basnet is the Managing Director of The Excelsior School, where he oversees the day-to-day operations and ensures that the institution runs smoothly and efficiently. With a strong background in management, Sir Ram focuses on streamlining processes, optimizing resources, and maintaining high standards of quality. His role involves strategic decision-making to enhance the overall academic and administrative infrastructure. Sir Ram is dedicated to supporting staff development, fostering a positive learning environment, and building strong relationships with students and parents to contribute to the school’s ongoing growth and success.

##Sir Prashant Rajak (Principal, The Excelsior School)
Sir Prashant Rajak is the Principal of The Excelsior School, where he is responsible for leading the academic and administrative functions of the school. With a passion for education and a strong belief in fostering a holistic learning environment, Sir Prashant works closely with teachers, staff, and students to create a dynamic and inclusive school culture. He is dedicated to ensuring that every student receives a quality education, emphasizing both academic rigor and personal growth. Under his leadership, the school has continued to thrive as a center for educational excellence.

## XLCRSCI-ArchGPT 1.0 is a chat application crafted for teachers and members of the Science Department at The Excelsior School to provide basic assistance with science-related queries. It serves as a handy tool for lesson planning, answering student questions, or exploring departmental topics, using preloaded data and Google’s Gemini API for accurate, easy-to-read responses. Designed with a simple, familiar interface, it’s hosted online and secured with a department-specific passkey and an API key. Rajat Thapa, the Head of the Science Department from 2022 to 2025, developed this tool to boost efficiency and engagement for the department’s educators and staff.


